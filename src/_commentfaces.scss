/*
 * Dear future self,
 *
 * You're here either because Reddit made another DOM change that
 * broke comment faces and you think you can fix them, or because you
 * realized it's a massive chunk of code and you think you can
 * optimize it. I promise you neither of these things are true, and
 * what's more, neither are worth your time.
 *
 * Comment faces are a *massive* hack and supporting them involves
 * incredibly annoying inconsistencies between browsers and platforms.
 * What's more, they're also expected to run on the mobile desktop
 * site, so they also have to work on touch screens and with all the
 * silly inconcistencies mobile browsers have.
 *
 * Below here is the silliest bit of CSS I have ever engineered, and
 * while I take pride in the fact that it works I encourage any other
 * person who feels compelled to change this code to strongly
 * reconsider their path in life before continuing. Every single bit
 * of code here has a specific purpose, and changing any one part
 * means trapping yourself in a complicated web of specificity
 * interactions and the closest thing CSS has to RegExes. In fact,
 * I can't think of a single case right now when it would be a good
 * idea to fix this system instead of rewriting it or just moving to
 * whatever the redesign has.
 *
 * Also, it's probably at least 2013. Did you ever take that trip
 * to Iceland?
 */
@import "util/functions";
@import "commentfaces-animated";
@import "commentfaces-static";
//@import "util/SassySort";

// Returns the selector of the Comment Face.
@function cf-selector($comment-face) {
	@return ".md [href=\"\##{$comment-face}\"]";
}

// A list of comment faces that are not meant for direct use.
$special-comment-faces: (
		"brokencommentface": (),
		"hisocuck_2": (),
);

// Removes Special Comment faces from `$static-comment-faces` and stores their properties to `$special-comment-faces`.
@each $index, $group in $static-comment-faces {
	$items: map-get($group, "items");
	@each $comment-face, $attributes in $items {
		@if map-has-key($special-comment-faces, $comment-face) {
			$special-comment-faces: map-merge($special-comment-faces, ($comment-face: (
					map-get($group, "sprite-sheet"),
					compact-position(map-get($attributes, "position"), map-get($group, "total-width")))
			));
			$static-comment-faces: map-deep-set($static-comment-faces, $index "items", map-remove($items, $comment-face));
		}
	}
}

$brokencommentface: map-get($special-comment-faces, "brokencommentface");

.md [href^="#"] {
	display: inline-block;
	position: relative;
	background: image-url(nth($brokencommentface, 1)) format-px(nth($brokencommentface, 2));
	width: 120px;
	height: 154px;
	overflow: hidden;
}

.md [href^="#"]:not([href="#s"]) {
	text-align: center;
	font-family: arial, sans-serif;
	font-size: 18px;
	color: white;
	text-shadow: 1px 1px #000, 1px -1px #000, -1px 1px #000, -1px -1px #000, 0 1px #000, 0 -1px #000, 1px 0 #000, -1px 0 #000;
	cursor: default;
}

.md [href^="#"]:hover {
	color: white;
	text-decoration: none;
}

.md [href^="#"]:active {
	pointer-events: none;
}

.md [href^="#"]:not([href="#s"]) > strong {
	display: block;
	width: 100%;
	position: absolute;
	bottom: 4px;
	font-weight: inherit
}

// Specific things to override
.md [href="#"], // Empty link
.md [href^="#!"], // Toolbox links
.md [href^="#res:"], // RES links
.md [href^="#gear"], // RES gear icon
.md [href^="#/"], // Empty link (for markdown)
.md [href$="#/"], // utm version of the above
.md [href^="#?"], // ?
.md [href="#s"], // Old spoiler style
.md [href*="#wiki_"] { // Wiki TOC
	display: inline !important;
	color: #557eb8 !important;
	text-shadow: none !important;
	cursor: pointer !important;
	font-size: inherit !important;
	text-align: inherit !important;
	background: none !important;
	position: static !important;
	font-family: inherit !important;
	overflow: visible !important;
	pointer-events: all !important;

	// oh right, this is why i didn't want to do text underlines for shit
	&:hover {
		text-decoration: underline !important;
	}

	.res-nightmode & {
		color: #8cb3d9 !important;
	}
}

.md .voteWeight[style*="none"] {
	display: none !important
}

// Comment faces! something something urban's domain - he writes shit code but we love him anyway <3
.wiki-page[class*="commentface"] table strong {
	display: block;
	text-align: center
}

// Manually defined
$hisocuck_2: map-get($special-comment-faces, "hisocuck_2");
#{cf-selector("hisocuck")}:hover {
	background: image-url(nth($hisocuck_2, 1)) format-px(nth($hisocuck_2, 2));
}

// The following code could be used to shorten the length of Comment Face selectors. It has its shortcomings so it's
// not used for the time being. It may come in handy one day.

//$cf-names: ();
//
//@each $sprite-sheet, $sprite-sheet-rules in $animated-comment-faces {
//	$cf-names: join($cf-names, map-keys(map_get($sprite-sheet-rules, "items")));
//}
//
//@each $sprite-sheet, $sprite-sheet-rules in $static-comment-faces {
//	$cf-names: join($cf-names, map-keys(map_get($sprite-sheet-rules, "items")));
//}
//
//$cf-names: quick-sort($cf-names);
//
//$cf-short-names: ();
//
//@for $index from 1 through length($cf-names) {
//	$cf-name: nth($cf-names, $index);
//	$common-with-previous: 0;
//	$common-with-next: 0;
//
//	@if ($index > 1) {
//		$common-with-previous: common-beginning-length($cf-name, nth($cf-names, $index - 1));
//	}
//
//	@if ($index < length($cf-names)) {
//		$common-with-next: common-beginning-length($cf-name, nth($cf-names, $index + 1));
//	}
//
//	$new-length: max($common-with-previous, $common-with-next) + 1;
//
//	@if $new-length < str_length($cf-name) {
//		$cf-short-names: map-merge($cf-short-names, ($cf-name: str-slice($cf-name, 1, $new-length)));
//	}
//}
//
//@function cf-selector($cf-name) {
//	@if not map-has-key($cf-short-names, $cf-name) {
//		@return ".md [href=\"\##{$cf-name}\"]";
//	}
//
//	@return ".md [href^=\"\##{map-get($cf-short-names, $cf-name)}\"]";
//}

// A mixin for the definition of the ending position of animated Comment Faces. To save the CSS size a single ending
// position could be reused for multiple Comment Faces which are aligned accordingly in their sprite sheets.
@mixin animation-keyframes($identifier, $to-position) {
	@keyframes #{$identifier} {
		to {
			background-position: 0 format-px($to-position);
		}
	}
}

$animation-identifiers: ();

// Assigns base-26 alphabet number as an identifier for the definition of Comment Face animation that ends at the given
// position.
@function assign-animation-identifier($to-position) {
	$animation-identifier: alpha-base(length($animation-identifiers));

	$animation-identifiers: map-merge($animation-identifiers, ($to-position: $animation-identifier)) !global;

	@return $animation-identifier;
}

// Generates rules of Animated Comment Faces from the Comment Face map.
@each $sprite-sheet, $sprite-sheet-rules in $animated-comment-faces {
	@each $comment-face, $attributes in map-get($sprite-sheet-rules, "items") {
		$duration: map-get($attributes, "duration");
		$is-loop: map-get($attributes, "loop");
		$width: map-get($attributes, "width");
		$from-position: map-get($attributes, "from-position");
		$to-position: map-get($attributes, "to-position");
		$steps: map-get($attributes, "frames") - if($is-loop, 0, 1);

		$animation-identifier: map-get($animation-identifiers, $to-position);

		@if not $animation-identifier {
			$animation-identifier: assign-animation-identifier($to-position);
			@include animation-keyframes($animation-identifier, $to-position);
		}

		// Drops the leading zero for values below 1.
		@if $duration < 1 {
			$duration: str-slice(#{$duration}, 2);
		}

		#{cf-selector($comment-face)} {
			height: #{map-get($attributes, "height")}px;
			width: #{map-get($attributes, "width")}px;
			@if $from-position != 0 {
				background: image-url($sprite-sheet) 0 format-px($from-position);
			} @else {
				background: image-url($sprite-sheet);
			}

			&:hover {
				animation: unquote($animation-identifier) #{$duration}s steps($steps) if($is-loop, infinite, forwards);
			}
		}
	}
}

$aligned-positions-even: ();
$aligned-positions-odd: ();

// Returns the map of aligned Comment Faces for the given position and the parity of the given height.
@function get-aligned-comment-faces($position, $height) {
	@if ($height % 2 == 0) {
		@return map-get($aligned-positions-even, $position);
	} @else {
		@return map-get($aligned-positions-odd, $position);
	}
}

// Returns x-position for Comment Faces of even height (the vertical position is 50% by default) and both x-position and
// zero y-position for Comment Faces of odd height (aligned to the top because 50% position is rendered inconsistently
// in case of odd image height).
@function static-cf-position($position, $height) {
	@if ($height % 2 == 0) {
		@return format-px($position);
	} @else {
		@return unquote(format-px($position) + " 0");
	}
}

// Creates a map of Comment Faces aligned to the same position. Only Comment Faces grouped with default dimensions are
// included.
@each $index, $group in $static-comment-faces {
	@if map-has-key($group, "default") {
		$total-width: map-get($group, "total-width");
		$default-width: nth(map-get($group, "default"), 1);
		$default-height: nth(map-get($group, "default"), 2);

		@each $comment-face, $attributes in map-get($group, "items") {
			$width: map-get($attributes, "width");
			$height: map-get($attributes, "height");
			@if $width == $default-width and $height == $default-height {
				$position: compact-position(map-get($attributes, "position"), $total-width);
				$aligned-comment-faces: get-aligned-comment-faces($position, $height);

				@if not $aligned-comment-faces {
					$aligned-comment-faces: $comment-face;
				} @else {
					$aligned-comment-faces: append($aligned-comment-faces, $comment-face);
				}

				@if ($height % 2 == 0) {
					$aligned-positions-even: map-merge($aligned-positions-even, ($position: $aligned-comment-faces));
				} @else {
					$aligned-positions-odd: map-merge($aligned-positions-odd, ($position: $aligned-comment-faces));
				}
			}
		}
	}
}

// Generates rules of Static Comment Faces from the Comment Face map.
@each $index, $group in $static-comment-faces {
	$sprite-sheet: map-get($group, "sprite-sheet");
	$default-width: 0;
	$default-height: 0;
	$total-width: map-get($group, "total-width");

	@if map-has-key($group, "default") {
		$default-width: nth(map-get($group, "default"), 1);
		$default-height: nth(map-get($group, "default"), 2);

		%default-#{$index} {
			width: #{$default-width}px;
			height: #{$default-height}px;
			background: image-url($sprite-sheet);
		}
	}

	@each $comment-face, $attributes in map-get($group, "items") {
		$background-position: compact-position(map-get($attributes, "position"), $total-width);
		$width: map-get($attributes, "width");
		$height: map-get($attributes, "height");

		#{cf-selector($comment-face)} {
			@if $width == $default-width and $height == $default-height {
				@extend %default-#{$index};

				@if not get-aligned-comment-faces($background-position, $height) {
					background-position: static-cf-position($background-position, $height)
				}
			} @else {
				width: #{$width}px;
				height: #{$height}px;
				background: image-url($sprite-sheet) static-cf-position($background-position, $height)
			}
		}
	}
}

// Generates background positions of aligned Comment Faces of even height.
@each $position, $aligned-comment-faces in $aligned-positions-even {
	@if ($position != 0) {
		%aligned-position-even#{$position} {
			background-position: format-px($position)
		}

		@each $comment-face in $aligned-comment-faces {
			#{cf-selector($comment-face)} {
				@extend %aligned-position-even#{$position};
			}
		}
	}
}

// Generates background positions of aligned Comment Faces of odd height.
@each $position, $aligned-comment-faces in $aligned-positions-odd {
	@if ($position != 0) {
		%aligned-position-odd#{$position} {
			background-position: unquote(format-px($position) + " 0")
		}

		@each $comment-face in $aligned-comment-faces {
			#{cf-selector($comment-face)} {
				@extend %aligned-position-odd#{$position};
			}
		}
	}
}
