// Adds "px" units to any non-zero number.
@function format-px($number) {
	@if $number == 0 {
		@return 0;
	}
	@return #{$number}px;
}

// Formats an image reference. Useful for easily moving the images during the development.
@function image-url($name, $extension: "jpg") {
	@return url("images/#{$name}.#{$extension}");
}

// Chooses a shorter specification of a given position on the repeated background image.
@function compact-position($position, $total) {
	@if str-length(#{$position}) < str-length(#{$position - $total}) {
		@return $position;
	} @else {
		@return $position - $total;
	}
}

// Converts the number into alphabet letter.
@function char($number) {
	@return str-slice("abcdefghijklmnopqrstuvwxyz", $number + 1, $number + 1);
}

// Converts the number into base-26 alphabet number string.
@function alpha-base($number) {
	$result: "";
	@if $number == 0 {
		@return char(0);
	}

	@while $number > 0 {
		$result: char($number % 26) + $result;

		$number: floor($number / 26);
	}

	@return $result;
}

// Returns the length of the common beginning of two strings.
@function common-beginning-length($a, $b) {
	$max-length: min(str-length($a), str-length($b));

	@for $index from 1 through $max-length {
		@if to-lower-case(str-slice($a, 1, $index)) != to-lower-case(str-slice($b, 1, $index)) {
			@return $index - 1;
		}
	}

	@return $max-length;
}

/// Deep set function to set a value in nested maps
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {List} $keys -  Key chaine
/// @param {*} $value - Value to assign
/// @return {Map}
@function map-deep-set($map, $keys, $value) {
	$maps: ($map,);
	$result: null;

	// If the last key is a map already
	// Warn the user we will be overriding it with $value
	@if type-of(nth($keys, -1)) == "map" {
		@warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
	}

	// If $keys is a single key
	// Just merge and return
	@if length($keys) == 1 {
		@return map-merge($map, ($keys: $value));
	}

	// Loop from the first to the second to last key from $keys
	// Store the associated map to this key in the $maps list
	// If the key doesn't exist, throw an error
	@for $i from 1 through length($keys) - 1 {
		$current-key: nth($keys, $i);
		$current-map: nth($maps, -1);
		$current-get: map-get($current-map, $current-key);
		@if $current-get == null {
			@error "Key `#{$current-key}` doesn't exist at current level in map.";
		}
		$maps: append($maps, $current-get);
	}

	// Loop from the last map to the first one
	// Merge it with the previous one
	@for $i from length($maps) through 1 {
		$current-map: nth($maps, $i);
		$current-key: nth($keys, $i);
		$current-val: if($i == length($maps), $value, $result);
		$result: map-merge($current-map, ($current-key: $current-val));
	}

	// Return result
	@return $result;
}